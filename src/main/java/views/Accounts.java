
package views;

import com.formdev.flatlaf.FlatLightLaf;
import config.*;
import javax.swing.*;
import javax.swing.table.*;
import database.*;
import java.awt.Image;
import java.io.File;
import java.util.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author NUN
 */
public class Accounts extends javax.swing.JFrame {

    /**
     * Creates new form accounts
     */
    public Accounts() {
        initComponents();
        Image icon = Variables.icon;
        this.setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        accountsTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();

        setTitle("Hesaplar");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        accountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "İsim", " Şifre", "Yetki", "Oluşturulma Tarihi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                accountsTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(accountsTable);

        exportButton.setText("Dışarı Aktar");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exportButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    AccountsDatabase ad = new AccountsDatabase();

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        DefaultTableModel model = (DefaultTableModel) accountsTable.getModel(); //tablo nesnemizi obje haline getiriyoruz.
        model.setRowCount(0); //veri listelenmeden önce başlangıç satırının sıfır yapıyor.
        List<String[]> values = ad.getAccounts();
        for (String[] eachRow : values) {
            model.addRow(eachRow); //obje haline gelen tablomuza metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }

    }//GEN-LAST:event_formComponentShown

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        int a = JOptionPane.showOptionDialog(this, "Hesap şifrelerinin görünmesini istiyor musunuz?", "Uyarı", 0, 0, null, new String[]{"Evet", "Hayır"}, "Hayır");
        boolean showpassword = false;
        if (a == 1) 
            showpassword = false;
        else if (a == 0) 
            showpassword = true;
        
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(0);
        filechooser.setMultiSelectionEnabled(false);
        filechooser.setSelectedFile(new File("untitled.csv"));
        filechooser.addChoosableFileFilter(new FileNameExtensionFilter("CSV (Virgülle ayrılmış) (*.csv)", "csv"));
        filechooser.setAcceptAllFileFilterUsed(true);
        int cancel = JFileChooser.CANCEL_OPTION;
        int approve = JFileChooser.APPROVE_OPTION;

        int[] rows = accountsTable.getSelectedRows();
        int answer = filechooser.showSaveDialog(null);
        if (answer == cancel) {
            return;
        }
        String path = filechooser.getSelectedFile().getAbsolutePath();
        String[] extensions = ((FileNameExtensionFilter) filechooser.getFileFilter()).getExtensions();
        String extension = "." + extensions[0];
        while (answer == approve && !path.endsWith(extension)) {
            if (answer == cancel) {
                return;
            }
            JOptionPane.showMessageDialog(null, "Lütfen " + extension + " uzantısı ekleyiniz!", "Hata", 0);
            answer = filechooser.showSaveDialog(filechooser);
            path = filechooser.getSelectedFile().getAbsolutePath();
        }
        while (answer == approve && filechooser.getSelectedFile().exists()) {
            if (answer == cancel) {
                return;
            }
            int n = JOptionPane.showOptionDialog(this, "Bu isime sahip bir dosya zaten bulunuyor. Bu dosyanın üzerine yazmak istediğinize emin misiniz?.", "Uyarı", 0, 0, null, new String[]{"Evet", "Hayır"}, "Hayır");
            if (n == 1) {
                answer = filechooser.showSaveDialog(filechooser);
            } else if (n == 0) {
                break;
            }
        }

        if (rows.length < 1) {
            if (answer == approve) {
                ad.exportAccounts(path, showpassword);
            }
        } else {
            int column = 0;
            for (int columnIndex = 0; columnIndex < accountsTable.getColumnCount(); columnIndex++) {
                if (accountsTable.getColumnName(columnIndex).equals("ID")) {
                    column = columnIndex;
                }
            }
            List<String> IDs = new ArrayList<>();
            for (int row : rows) {
                String ID = (String) accountsTable.getValueAt(row, column);
                System.out.println(ID);
                IDs.add(ID);
            }
            if (answer == approve) {
                ad.exportSomeAccounts(path, IDs, showpassword);
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void accountsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountsTableMouseReleased
        if(evt.getClickCount() == 2){
            int row = accountsTable.getSelectedRow();
            int column = 0;
            for (int columnIndex = 0; columnIndex < accountsTable.getColumnCount(); columnIndex++) {
                if (accountsTable.getColumnName(columnIndex).equals("ID")) {
                    column=columnIndex;
                }
            }
            String ID = (String) accountsTable.getValueAt(row, column);
            EditAccount editaccount = new EditAccount(ID);
            editaccount.setVisible(true);
        }
    }//GEN-LAST:event_accountsTableMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception e) {

        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Accounts().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountsTable;
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
