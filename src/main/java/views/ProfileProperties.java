
package views;

import config.Dialogs;
import com.formdev.flatlaf.FlatLightLaf;
import config.Variables;
import database.*;
import java.awt.Image;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NUN
 */
public class ProfileProperties extends javax.swing.JFrame {

    String assignedProfileID;
    String assignedProfileName;
    String currentProfileName, currentProfileSurname, currentProfileDuty, currentProfileIN;
    
    List<String[]> assignedDevices = new ArrayList<>();
    /**
     * Creates new form ProfileProperties
     * @param assignedProfileID
     */
    public ProfileProperties(String assignedProfileID) {
        this.assignedProfileID = assignedProfileID;
        initComponents();
        Image icon = Variables.icon;
        this.setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        assignedDevicesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        profileName = new javax.swing.JTextField();
        removeAssignmentButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        updateStatusButton = new javax.swing.JButton();
        chooseProfileStatus = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        chooseDevicetoAssign = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        assignButton = new javax.swing.JButton();
        showProfileLog = new javax.swing.JButton();
        removeAllAssignments = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteProfileButton = new javax.swing.JButton();
        profileSurname = new javax.swing.JTextField();
        profilePhoneNum = new javax.swing.JTextField();
        profileDuty = new javax.swing.JTextField();
        chooseDevicetoRemoveAssignment = new javax.swing.JComboBox<>();
        profileStatus = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        profileDateOfCreation = new javax.swing.JLabel();

        setTitle("Profil Özellikleri");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("İsim:");

        jLabel2.setText("Soyad:");

        assignedDevicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Cihaz İsmi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        assignedDevicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                assignedDevicesTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(assignedDevicesTable);

        jLabel3.setText("Görevi:");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Profil Oluşturulma Tarihi:");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel4.setText("Kimlik No:");

        jLabel9.setText("Durum:");

        profileName.setEnabled(false);
        profileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileNameActionPerformed(evt);
            }
        });

        removeAssignmentButton.setText("Atamayı Kaldır");
        removeAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAssignmentButtonActionPerformed(evt);
            }
        });

        editButton.setText("Düzenle");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        updateStatusButton.setText("Güncelle");
        updateStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStatusButtonActionPerformed(evt);
            }
        });

        chooseProfileStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Çalışıyor", "Ayrıldı" }));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Durum Seç:");

        jLabel16.setText("Cihaz Seç:");

        assignButton.setText("Cihazı Ata");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        showProfileLog.setText("Geçmişi Görüntüle");
        showProfileLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showProfileLogActionPerformed(evt);
            }
        });

        removeAllAssignments.setText("Tüm Atanan Cihazları Kaldır");
        removeAllAssignments.setEnabled(false);
        removeAllAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllAssignmentsActionPerformed(evt);
            }
        });

        updateButton.setText("Güncelle");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteProfileButton.setText("Profili Sil");
        deleteProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProfileButtonActionPerformed(evt);
            }
        });

        profileSurname.setEnabled(false);
        profileSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileSurnameActionPerformed(evt);
            }
        });

        profilePhoneNum.setEnabled(false);
        profilePhoneNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profilePhoneNumActionPerformed(evt);
            }
        });

        profileDuty.setEnabled(false);
        profileDuty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileDutyActionPerformed(evt);
            }
        });

        jLabel18.setText("Cihaz Seç:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(20, 20, 20)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(profileName, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                        .addComponent(profileSurname))
                                    .addGap(49, 49, 49)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(chooseProfileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(profileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(23, 23, 23))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(profileDuty, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(profilePhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(90, 90, 90)
                                    .addComponent(updateStatusButton))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(chooseDevicetoAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(25, 25, 25)
                                                        .addComponent(assignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(chooseDevicetoRemoveAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(12, 12, 12))
                                        .addComponent(removeAllAssignments, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(deleteProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(editButton)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(updateButton)))
                                            .addComponent(showProfileLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(removeAssignmentButton)
                                            .addGap(33, 33, 33)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(profileDateOfCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(profileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(profileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(profileSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseProfileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(profileDuty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(updateStatusButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(profilePhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseDevicetoRemoveAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAssignmentButton)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseDevicetoAssign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeAllAssignments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showProfileLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateButton)
                            .addComponent(editButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteProfileButton)
                        .addGap(39, 39, 39)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(profileDateOfCreation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    ProfilePropertiesDatabase ppd = new ProfilePropertiesDatabase();
    
    private void profileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profileNameActionPerformed

    private void removeAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAssignmentButtonActionPerformed
        if(chooseDevicetoRemoveAssignment.getSelectedItem() == null) return;
        if(assignedProfileID==null||assignedProfileID.equals("")) return;
        String deviceidname = chooseDevicetoRemoveAssignment.getSelectedItem().toString();
        String[] deviceIDName = deviceidname.split(" - ");
        String deviceID = deviceIDName[0];
        
        int x = 0;
        for(String[] row : assignedDevices){
            if(row[0] == null ? deviceID != null : row[0].equals(deviceID)) break;
            x++;
        }
        String deviceName;
        if(x+1>assignedDevices.size()){
            deviceName = "--";
        }else{
            deviceName = assignedDevices.get(x)[1];
        }
        int n = Dialogs.questionBox(this, deviceName+" isimli ve "+deviceID+" ID'li cihazın atamasını"
                + " kaldırmak istediğinize emin misiniz?", "Uyarı");
        if(n!=0)return;
        ppd.removeAssignment(deviceID, deviceidname, assignedProfileID, assignedProfileName);
        
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultTableModel model=(DefaultTableModel) assignedDevicesTable.getModel(); //tablo nesnemizi obje haline getiriyoruz.
        model.setRowCount(0); //veri listelenmeden önce başlangıç satırının sıfır yapıyor.
        for (String[] eachRow : assignedDevices) {
            model.addRow(eachRow); //obje haline gelen tablomuza metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }
        
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultComboBoxModel model1 = (DefaultComboBoxModel) chooseDevicetoRemoveAssignment.getModel();
        model1.removeAllElements();
        for (String[] eachRow : assignedDevices) {
            String text = eachRow[0] + " - " + eachRow[1];
            model1.addElement(text); //obje haline gelen comboboxa metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }
        
        List<String[]> allAvailableDevices = ppd.getAllAvailableDevices();
        DefaultComboBoxModel device = (DefaultComboBoxModel) chooseDevicetoAssign.getModel();
        device.removeAllElements();
        for (String[] eachRow : allAvailableDevices) {
            String text = eachRow[0] + " - " + eachRow[1];
            if(device.getIndexOf(text) == -1){
                device.addElement(text);
            }
        }
        
        DefaultTableModel model2 = (DefaultTableModel) assignedDevicesTable.getModel();
        if(model2.getRowCount() == 0)
            removeAllAssignments.setEnabled(false);
    }//GEN-LAST:event_removeAssignmentButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        currentProfileName = profileName.getText(); currentProfileSurname = profileSurname.getText();
        currentProfileDuty = profileDuty.getText(); currentProfileIN = profilePhoneNum.getText();
        editButton.setEnabled(false); updateButton.setEnabled(true);
        profileName.setEnabled(true); profileSurname.setEnabled(true);
        profileDuty.setEnabled(true); profilePhoneNum.setEnabled(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void updateStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStatusButtonActionPerformed
        String newStatus = chooseProfileStatus.getSelectedItem().toString();
        if(newStatus.equals(profileStatus.getText())) return;
        System.out.println(assignedDevices.isEmpty());
        if(newStatus.equals("Ayrıldı") && (!assignedDevices.isEmpty())){
            Dialogs.errorBox("Bütün atamaları kaldırınız!", "Hata");
            return;
        }
        ppd.updateStatus(assignedProfileID, newStatus);
        profileStatus.setText(newStatus);
    }//GEN-LAST:event_updateStatusButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        if(chooseDevicetoAssign.getSelectedItem() == null) return; // Return if the user didn't select any device to assign
        if(assignedProfileID==null||assignedProfileID.equals("")) return; // Return if the profile ID is null or ""
        
        /* Initialise deviceidname as the string value of selected item to assign, then seperate the ID and the name 
        in deviceidname as a String array and assign the ID to deviceID*/
        String deviceidname = chooseDevicetoAssign.getSelectedItem().toString();
        String[] deviceIDName = deviceidname.split(" - ");
        String deviceID = deviceIDName[0];
        
        /* Call the sub-procedure that assigns the device to the profile from the parameters passed. */
        ppd.assign(deviceID, deviceidname, assignedProfileID, assignedProfileName);
        
        /* Initialise the list value returned from the sub-procedure that returns the assigned devices 
        associated with profileID passed as a parameter to fill the table in GUI*/
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultTableModel model=(DefaultTableModel) assignedDevicesTable.getModel(); 
        model.setRowCount(0);
        for (String[] eachRow : assignedDevices) {
            model.addRow(eachRow); // Adding each element in the assignedDevices containing the returned list from the sub-procedure
        }
        
        /* Initialise a second list value returned from the sub-procedure that returns the assigned devices 
        associated with profileID passed as a parameter in order to fill the combobox in GUI*/
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultComboBoxModel model1 = (DefaultComboBoxModel) chooseDevicetoRemoveAssignment.getModel();
        model1.removeAllElements();
        for (String[] eachRow : assignedDevices) {
            String text = eachRow[0] + " - " + eachRow[1];
            model1.addElement(text); // Adding each element in the assignedDevices containing the returned list from the sub-procedure
        }
        
        /* Initialise a third list value returned from the sub-procedure that returns the all available
        devices to fill the other combobox in GUI*/
        List<String[]> values = ppd.getAllAvailableDevices();
        DefaultComboBoxModel device = (DefaultComboBoxModel) chooseDevicetoAssign.getModel();
        device.removeAllElements();
        for (String[] eachRow : values) {
            String text = eachRow[0] + " - " + eachRow[1];
            if(device.getIndexOf(text) == -1){
                device.addElement(text); // Adding each element in the values containing the returned list from the sub-procedure
            }
        }
        
        DefaultTableModel model2 = (DefaultTableModel) assignedDevicesTable.getModel();
        if(model2.getRowCount() != 0)
            removeAllAssignments.setEnabled(true);
    }//GEN-LAST:event_assignButtonActionPerformed

    private void showProfileLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showProfileLogActionPerformed
        HistoryOfProfile log = new HistoryOfProfile(assignedProfileID);
        log.setVisible(true);
    }//GEN-LAST:event_showProfileLogActionPerformed

    private void removeAllAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllAssignmentsActionPerformed
        if(assignedDevices == null) return;
        if(assignedProfileID==null||assignedProfileID.equals("")) return;
        int n = Dialogs.questionBox(this, "Bütün cihazların atamasını kaldırmak istediğinize emin misiniz?", "Uyarı");
        if(n!=0)return;
        ppd.removeAllAssignments(assignedDevices, assignedProfileID, assignedProfileName);
        
        DefaultTableModel model=(DefaultTableModel) assignedDevicesTable.getModel(); //tablo nesnemizi obje haline getiriyoruz.
        model.setRowCount(0);
        
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultComboBoxModel model1 = (DefaultComboBoxModel) chooseDevicetoRemoveAssignment.getModel();
        model1.removeAllElements();
        for (String[] eachRow : assignedDevices) {
            String text = eachRow[0] + " - " + eachRow[1];
            model1.addElement(text); //obje haline gelen comboboxa metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }
        
        List<String[]> values = ppd.getAllAvailableDevices();
        DefaultComboBoxModel device = (DefaultComboBoxModel) chooseDevicetoAssign.getModel();
        device.removeAllElements();
        for (String[] eachRow : values) {
            String text = eachRow[0] + " - " + eachRow[1];
            if(device.getIndexOf(text) == -1){
                device.addElement(text);
            }
        }
    }//GEN-LAST:event_removeAllAssignmentsActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String newName = profileName.getText(), newSurname = profileSurname.getText(), newDuty = profileDuty.getText(), newIN = profilePhoneNum.getText();
        if(newName.equals(currentProfileName) && newSurname.equals(currentProfileSurname) && newDuty.equals(currentProfileDuty) && newIN.equals(currentProfileIN)){
            editButton.setEnabled(true); updateButton.setEnabled(false);
            profileName.setEnabled(false); profileSurname.setEnabled(false);
            profileDuty.setEnabled(false); profilePhoneNum.setEnabled(false);
            return;
        }
        ppd.edit(assignedProfileID, newName, newSurname, newDuty, newIN);
        editButton.setEnabled(true); updateButton.setEnabled(false);
        profileName.setEnabled(false); profileSurname.setEnabled(false);
        profileDuty.setEnabled(false); profilePhoneNum.setEnabled(false);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProfileButtonActionPerformed
        int n = Dialogs.questionBox(this, "Bu profili silmek istediğinize emin misiniz?", "Uyarı");
        if(n!=0) return;
        String profilename = profileName.getText(), profilesurname = profileSurname.getText();
        ppd.deleteProfile(assignedProfileID, profilename, profilesurname);
        profileName.setEnabled(false); profileSurname.setEnabled(false); profileDuty.setEnabled(false); profilePhoneNum.setEnabled(false);
        chooseProfileStatus.setEnabled(false); updateStatusButton.setEnabled(false); chooseDevicetoRemoveAssignment.setEnabled(false);
        removeAssignmentButton.setEnabled(false); chooseDevicetoAssign.setEnabled(false); assignButton.setEnabled(false); removeAllAssignments.setEnabled(false);
        showProfileLog.setEnabled(false); editButton.setEnabled(false); updateButton.setEnabled(false); deleteProfileButton.setEnabled(false);
    }//GEN-LAST:event_deleteProfileButtonActionPerformed

    private void profileSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profileSurnameActionPerformed

    private void profilePhoneNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profilePhoneNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profilePhoneNumActionPerformed

    private void profileDutyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileDutyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profileDutyActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        String[] properties = ppd.getProfile(assignedProfileID);
        profileName.setText(properties[0]); profileSurname.setText(properties[1]); profileDuty.setText(properties[4]); profilePhoneNum.setText(properties[3]);
        profileStatus.setText(properties[2]); profileDateOfCreation.setText(properties[5]);
        assignedProfileName = properties[0];
        
        assignedDevices = ppd.getAssignedDevices(assignedProfileID);
        DefaultTableModel model=(DefaultTableModel) assignedDevicesTable.getModel(); //tablo nesnemizi obje haline getiriyoruz.
        model.setRowCount(0); //veri listelenmeden önce başlangıç satırının sıfır yapıyor.
        for (String[] eachRow : assignedDevices) {
            model.addRow(eachRow); //obje haline gelen tablomuza metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }
        
        if(model.getRowCount()>0) removeAllAssignments.setEnabled(true);
        
        DefaultComboBoxModel model1 = (DefaultComboBoxModel) chooseDevicetoRemoveAssignment.getModel();
        for (String[] eachRow : assignedDevices) {
            String text = eachRow[0] + " - " + eachRow[1];
            model1.addElement(text); //obje haline gelen comboboxa metod yardımıyla verileri while döngüsü içerisinde satır satır ekliyoruz.
        }
        
        //Pair<List<String>, List<String>>  p = ppd.getAllDevices();
        List<String[]> values = ppd.getAllAvailableDevices();
        DefaultComboBoxModel device = (DefaultComboBoxModel) chooseDevicetoAssign.getModel();      
        for (String[] eachRow : values) {
            String text = eachRow[0] + " - " + eachRow[1];
            if(device.getIndexOf(text) == -1){
                device.addElement(text);
            }
        }
        
        DefaultTableModel model2 = (DefaultTableModel) assignedDevicesTable.getModel();
        if(model2.getRowCount() != 0)
            removeAllAssignments.setEnabled(true);
    }//GEN-LAST:event_formComponentShown

    private void assignedDevicesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignedDevicesTableMouseReleased
        if(evt.getClickCount() == 2){
            int row = assignedDevicesTable.getSelectedRow();
            int column = 0;
            for (int columnIndex = 0; columnIndex < assignedDevicesTable.getColumnCount(); columnIndex++) {
                if (assignedDevicesTable.getColumnName(columnIndex).equals("ID")) {
                    column=columnIndex;
                }
            }
            String ID = (String) assignedDevicesTable.getValueAt(row, column);
            DeviceProperties deviceProperties = new DeviceProperties(ID);
            deviceProperties.setVisible(true);
        }
    }//GEN-LAST:event_assignedDevicesTableMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfileProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfileProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfileProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfileProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
try{
           UIManager.setLookAndFeel(new FlatLightLaf());
       }catch(Exception e){
           
       }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfileProperties(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JTable assignedDevicesTable;
    private javax.swing.JComboBox<String> chooseDevicetoAssign;
    private javax.swing.JComboBox<String> chooseDevicetoRemoveAssignment;
    private javax.swing.JComboBox<String> chooseProfileStatus;
    private javax.swing.JButton deleteProfileButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel profileDateOfCreation;
    private javax.swing.JTextField profileDuty;
    private javax.swing.JTextField profileName;
    private javax.swing.JTextField profilePhoneNum;
    private javax.swing.JLabel profileStatus;
    private javax.swing.JTextField profileSurname;
    private javax.swing.JButton removeAllAssignments;
    private javax.swing.JButton removeAssignmentButton;
    private javax.swing.JButton showProfileLog;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton updateStatusButton;
    // End of variables declaration//GEN-END:variables
}
